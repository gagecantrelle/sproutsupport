generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  google_id        String         @unique
  email            String?        @unique
  password         String?
  userName         String?        @unique
  avatar           String?
  bio              String?        @db.Text
  city             String?
  state            String?
  level            Int            @default(1)
  points           Int            @default(0)
  DarkLight        Boolean        @default(false)
  showForumPosts   Boolean        @default(false)
  showMyMeetups    Boolean        @default(false)
  showOtherMeetups Boolean        @default(false)
  showPlants       Boolean        @default(false)
  showWeather      Boolean        @default(false)
  attendees        Attendee[]
  meets            Meet[]
  notifications    Notification[]
  plants           Plant[]
  posts            Post[]
  comments         Comment[]

  @@unique([id, userName])
}

model Image {
  id       Int    @id @default(autoincrement())
  url      String
  category String
}

model Meet {
  id          Int        @id @default(autoincrement())
  time_date   String
  location    String
  eventName   String
  description String
  imageUrl    String
  userId      Int
  message     String?
  status      String
  attendees   Attendee[]
  owner       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Meet_userId_fkey")
}

model Notification {
  id        Int    @id @default(autoincrement())
  userId    Int
  message   String
  recipient User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Notification_userId_fkey")
}

model Plant {
  id          Int     @id @default(autoincrement())
  userId      Int
  plantAPIID  Int?
  species     String?
  commonName  String?
  nickname    String?
  location    String?
  imageUrl    String?
  description String?
  caregiver   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([userId], map: "Plant_userId_fkey")
}

model Task {
  id              Int       @id @default(autoincrement())
  taskName        String?
  frequency       String?
  lastCompleted   DateTime?
  nextComplection DateTime?
  overdue         Boolean?
  plant_id        Int?
  taskPlant       Plant?    @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@index([plant_id], map: "Task_plant_id_fkey")
}

model Post {
  id       Int       @id @default(autoincrement())
  userId   Int
  message  String
  imageUrl String
  username String
  owner    User      @relation(fields: [userId, username], references: [id, userName], onDelete: Cascade)
  Comment  Comment[]

  @@index([userId, username], map: "Post_userId_fkey")
}

model Comment {
  id       Int    @id @default(autoincrement())
  message  String
  postId   Int
  userId   Int
  username String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  owner    User   @relation(fields: [userId, username], references: [id, userName], onDelete: Cascade)

  @@index([postId], map: "Comment_postId_fkey")
  @@index([userId, username], map: "Comment_userId_fkey")
}

model Attendee {
  id          Int  @id @default(autoincrement())
  meet_id     Int
  userId      Int
  meet        Meet @relation(fields: [meet_id], references: [id], onDelete: Cascade)
  participant User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([meet_id], map: "Attendee_meet_id_fkey")
  @@index([userId], map: "Attendee_userId_fkey")
}
